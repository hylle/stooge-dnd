{"ast":null,"code":"import _objectSpread from \"/Users/jh/www/projects/stooge-dnd/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jh/www/projects/stooge-dnd/src/components/monsterstats/index.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport isNaN from 'lodash/isNaN';\nimport { prettyModifier } from '../../utils/statModifiers';\nimport IconDamage from \"./damage.svg\";\nimport IconHeal from \"./heal.svg\";\nimport './monsterstats.scss';\nimport { INITIATIVE_TAKE_DAMAGE, INITIATIVE_HEAL_DAMAGE } from '../../reducers/initiative';\n/* eslint-disable no-floating-decimal */\n\nvar CR_TO_XP_TABLE = {\n  0: 10,\n  0.125: 25,\n  0.25: 50,\n  0.5: 100,\n  1: 200,\n  2: 450,\n  3: 700,\n  4: 1100,\n  5: 1800,\n  6: 2300,\n  7: 2900,\n  8: 3900,\n  9: 5000,\n  10: 5900,\n  11: 7200,\n  12: 8400,\n  13: 10000,\n  14: 11500,\n  15: 13000,\n  16: 15000,\n  17: 18000,\n  18: 20000,\n  19: 22000,\n  20: 25000,\n  21: 33000,\n  22: 41000,\n  23: 50000,\n  24: 62000,\n  25: 75000,\n  26: 90000,\n  27: 105000,\n  28: 120000,\n  29: 135000,\n  30: 155000\n};\n/* eslint-enable no-floating-decimal */\n\nvar CR2XP = function CR2XP(cr) {\n  var xp = CR_TO_XP_TABLE[cr];\n  return xp !== undefined ? \"\".concat(cr, \" (\").concat(xp, \" XP)\") : 'Unknown';\n};\n\nvar SKILLS = ['athletics', 'acrobatics', 'sleight_of_hand', 'stealth', 'arcana', 'history', 'investigation', 'nature', 'religion', 'animal_handling', 'insight', 'medicine', 'perception', 'survival', 'deception', 'intimidation', 'performance', 'persuasion'];\nvar SKILLS_NAMES = ['Athletics', 'Acrobatics', 'Sleight of Hand', 'Stealth', 'Arcana', 'History', 'Investigation', 'Nature', 'Religion', 'Animal Handling', 'Insight', 'Medicine', 'Perception', 'Survival', 'Deception', 'Intimidation', 'Performance', 'Persuasion'];\n\nvar PLAIN_VALUE_FORMATTER = function PLAIN_VALUE_FORMATTER(name, value) {\n  return value;\n};\n\nvar joinStats = function joinStats(title, data) {\n  var stats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var names = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var formatter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function (name, value) {\n    return \"\".concat(name, \" \").concat(prettyModifier(value));\n  };\n  var joinedStats = stats.reduce(function (prev, curr, index) {\n    if (data[curr]) {\n      var name = names[index];\n      prev.push(formatter(name, data[curr]));\n      return prev;\n    }\n\n    return prev;\n  }, []).join(', ');\n\n  if (joinedStats.length) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, title), \" \", joinedStats);\n  }\n\n  return null;\n};\n\nvar keyToNameFormatter = function keyToNameFormatter(key) {\n  var spacedStr = key.replace('_', ' ');\n  return spacedStr.charAt(0).toUpperCase() + spacedStr.slice(1);\n};\n\nvar MonsterStats = function MonsterStats(_ref) {\n  var monster = _ref.monster,\n      dispatch = _ref.dispatch;\n\n  if (!monster) {\n    return null;\n  }\n\n  var stats = monster.stats;\n  return React.createElement(\"div\", {\n    className: \"monsterstats\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"monsterstats__adjust-hp\",\n    onClick: function onClick() {\n      var damage = parseInt(prompt('Enter damage amount.'), 10);\n\n      if (!isNaN(damage)) {\n        dispatch({\n          type: INITIATIVE_TAKE_DAMAGE,\n          actor: monster,\n          damage: damage\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: IconDamage,\n    alt: \"Take damage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"monsterstats__adjust-hp monsterstats__adjust-hp--heal\",\n    onClick: function onClick() {\n      var heal = parseInt(prompt('Enter healing amount.'), 10);\n\n      if (!isNaN(heal)) {\n        dispatch({\n          type: INITIATIVE_HEAL_DAMAGE,\n          actor: monster,\n          heal: heal\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: IconHeal,\n    alt: \"Heal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }))), !!stats.customStatLink && React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, monster.name), React.createElement(\"iframe\", {\n    src: stats.customStatLink,\n    sandbox: \"\",\n    title: monster.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  })), !stats.customStatLink && React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, monster.name), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"\\n\\t\\t\\t\\t\\t\\t\\t\".concat(stats.size, \"\\n\\t\\t\\t\\t\\t\\t\\t\").concat(stats.type).concat(stats.subtype ? \" (\".concat(stats.subtype, \")\") : '', \",\\n\\t\\t\\t\\t\\t\\t\\t\").concat(stats.alignment, \"\\n\\t\\t\\t\\t\\t\\t\")), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"AC:\"), \" \", stats.armor_class, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"HP:\"), \" \", stats.hit_points, \" (\", stats.hit_dice, \")\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"Speed:\"), \" \", stats.speed, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  })), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }), React.createElement(\"table\", {\n    width: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, ['STR', 'DEX', 'CON', 'INT', 'WIS', 'CHA'].map(function (ability) {\n    return React.createElement(\"th\", {\n      key: ability,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, ability);\n  }))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma'].map(function (ability) {\n    return React.createElement(\"td\", {\n      key: ability,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, stats[ability], \" (\", prettyModifier(stats[ability]), \")\");\n  })))), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, joinStats('Saving throws', stats, ['strength_save', 'dexterity_save', 'constitution_save', 'intelligence_save', 'wisdom_save', 'charisma_save'], ['Str', 'Dex', 'Con', 'Int', 'Wis', 'Cha'])), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, joinStats('Skills', stats, SKILLS, SKILLS_NAMES)), ['damage_vulnerabilities', 'damage_resistances', 'damage_immunities', 'condition_immunities', 'senses', 'languages'].map(function (key) {\n    return React.createElement(\"div\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, joinStats(keyToNameFormatter(key), stats, [key], [], PLAIN_VALUE_FORMATTER));\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, joinStats('Challenge', stats, ['challenge_rating'], [], function (name, value) {\n    return CR2XP(value);\n  })), ['special_abilities', 'actions', 'legendary_actions'].map(function (section) {\n    if (stats[section]) {\n      return React.createElement(Fragment, {\n        key: section,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, keyToNameFormatter(section)), stats[section].map(function (action, i) {\n        return React.createElement(\"div\", {\n          key: action.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, action.name)), ' ', React.createElement(\"pre\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295\n          },\n          __self: this\n        }, action.desc));\n      })));\n    }\n\n    return null;\n  })));\n};\n\nMonsterStats.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  monster: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.oneOf([false])])\n};\nMonsterStats.defaultProps = {\n  monster: false\n};\nexport default connect(function (state, props) {\n  var id = props.match.params.id;\n  return _objectSpread({}, state, {\n    monster: state.initiative.actors.find(function (monster) {\n      return monster.stats && monster.id === id;\n    })\n  });\n})(MonsterStats);","map":{"version":3,"sources":["/Users/jh/www/projects/stooge-dnd/src/components/monsterstats/index.js"],"names":["React","Fragment","PropTypes","connect","isNaN","prettyModifier","INITIATIVE_TAKE_DAMAGE","INITIATIVE_HEAL_DAMAGE","CR_TO_XP_TABLE","CR2XP","cr","xp","undefined","SKILLS","SKILLS_NAMES","PLAIN_VALUE_FORMATTER","name","value","joinStats","title","data","stats","names","formatter","joinedStats","reduce","prev","curr","index","push","join","length","keyToNameFormatter","key","spacedStr","replace","charAt","toUpperCase","slice","MonsterStats","monster","dispatch","damage","parseInt","prompt","type","actor","IconDamage","heal","IconHeal","customStatLink","size","subtype","alignment","armor_class","hit_points","hit_dice","speed","map","ability","section","action","i","desc","propTypes","func","isRequired","oneOfType","shape","oneOf","defaultProps","state","props","id","match","params","initiative","actors","find"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport isNaN from 'lodash/isNaN';\nimport { prettyModifier } from '../../utils/statModifiers';\n\nimport IconDamage from './damage.svg';\nimport IconHeal from './heal.svg';\n\nimport './monsterstats.scss';\nimport {\n\tINITIATIVE_TAKE_DAMAGE,\n\tINITIATIVE_HEAL_DAMAGE,\n} from '../../reducers/initiative';\n\n/* eslint-disable no-floating-decimal */\nconst CR_TO_XP_TABLE = {\n\t0: 10,\n\t0.125: 25,\n\t0.25: 50,\n\t0.5: 100,\n\t1: 200,\n\t2: 450,\n\t3: 700,\n\t4: 1100,\n\t5: 1800,\n\t6: 2300,\n\t7: 2900,\n\t8: 3900,\n\t9: 5000,\n\t10: 5900,\n\t11: 7200,\n\t12: 8400,\n\t13: 10000,\n\t14: 11500,\n\t15: 13000,\n\t16: 15000,\n\t17: 18000,\n\t18: 20000,\n\t19: 22000,\n\t20: 25000,\n\t21: 33000,\n\t22: 41000,\n\t23: 50000,\n\t24: 62000,\n\t25: 75000,\n\t26: 90000,\n\t27: 105000,\n\t28: 120000,\n\t29: 135000,\n\t30: 155000,\n};\n/* eslint-enable no-floating-decimal */\n\nconst CR2XP = (cr) => {\n\tconst xp = CR_TO_XP_TABLE[cr];\n\treturn xp !== undefined ? `${cr} (${xp} XP)` : 'Unknown';\n};\n\nconst SKILLS = [\n\t'athletics',\n\t'acrobatics',\n\t'sleight_of_hand',\n\t'stealth',\n\t'arcana',\n\t'history',\n\t'investigation',\n\t'nature',\n\t'religion',\n\t'animal_handling',\n\t'insight',\n\t'medicine',\n\t'perception',\n\t'survival',\n\t'deception',\n\t'intimidation',\n\t'performance',\n\t'persuasion',\n];\nconst SKILLS_NAMES = [\n\t'Athletics',\n\t'Acrobatics',\n\t'Sleight of Hand',\n\t'Stealth',\n\t'Arcana',\n\t'History',\n\t'Investigation',\n\t'Nature',\n\t'Religion',\n\t'Animal Handling',\n\t'Insight',\n\t'Medicine',\n\t'Perception',\n\t'Survival',\n\t'Deception',\n\t'Intimidation',\n\t'Performance',\n\t'Persuasion',\n];\n\nconst PLAIN_VALUE_FORMATTER = (name, value) => value;\nconst joinStats = (\n\ttitle,\n\tdata,\n\tstats = [],\n\tnames = [],\n\tformatter = (name, value) => {\n\t\treturn `${name} ${prettyModifier(value)}`;\n\t},\n) => {\n\tconst joinedStats = stats\n\t\t.reduce((prev, curr, index) => {\n\t\t\tif (data[curr]) {\n\t\t\t\tconst name = names[index];\n\t\t\t\tprev.push(formatter(name, data[curr]));\n\t\t\t\treturn prev;\n\t\t\t}\n\n\t\t\treturn prev;\n\t\t}, [])\n\t\t.join(', ');\n\n\tif (joinedStats.length) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<strong>{title}</strong> {joinedStats}\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn null;\n};\n\nconst keyToNameFormatter = (key) => {\n\tconst spacedStr = key.replace('_', ' ');\n\treturn spacedStr.charAt(0).toUpperCase() + spacedStr.slice(1);\n};\n\nconst MonsterStats = ({ monster, dispatch }) => {\n\tif (!monster) {\n\t\treturn null;\n\t}\n\n\tconst { stats } = monster;\n\n\treturn (\n\t\t<div className=\"monsterstats\">\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tclassName=\"monsterstats__adjust-hp\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconst damage = parseInt(prompt('Enter damage amount.'), 10);\n\t\t\t\t\t\tif (!isNaN(damage)) {\n\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\ttype: INITIATIVE_TAKE_DAMAGE,\n\t\t\t\t\t\t\t\tactor: monster,\n\t\t\t\t\t\t\t\tdamage,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<img src={IconDamage} alt=\"Take damage\" />\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tclassName=\"monsterstats__adjust-hp monsterstats__adjust-hp--heal\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconst heal = parseInt(prompt('Enter healing amount.'), 10);\n\t\t\t\t\t\tif (!isNaN(heal)) {\n\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\ttype: INITIATIVE_HEAL_DAMAGE,\n\t\t\t\t\t\t\t\tactor: monster,\n\t\t\t\t\t\t\t\theal,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<img src={IconHeal} alt=\"Heal\" />\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{!!stats.customStatLink && (\n\t\t\t\t<>\n\t\t\t\t\t<h2>{monster.name}</h2>\n\t\t\t\t\t<iframe src={stats.customStatLink} sandbox=\"\" title={monster.name}></iframe>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t{!stats.customStatLink && (\n\t\t\t\t<>\n\t\t\t\t\t<h2>{monster.name}</h2>\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t{`\n\t\t\t\t\t\t\t${stats.size}\n\t\t\t\t\t\t\t${stats.type}${stats.subtype ? ` (${stats.subtype})` : ''},\n\t\t\t\t\t\t\t${stats.alignment}\n\t\t\t\t\t\t`}\n\t\t\t\t\t</strong>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<strong>AC:</strong> {stats.armor_class}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<strong>HP:</strong> {stats.hit_points} ({stats.hit_dice})<br />\n\t\t\t\t\t\t<strong>Speed:</strong> {stats.speed}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<table width=\"100%\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t{['STR', 'DEX', 'CON', 'INT', 'WIS', 'CHA'].map((ability) => (\n\t\t\t\t\t\t\t\t\t<th key={ability}>{ability}</th>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t'strength',\n\t\t\t\t\t\t\t\t\t'dexterity',\n\t\t\t\t\t\t\t\t\t'constitution',\n\t\t\t\t\t\t\t\t\t'intelligence',\n\t\t\t\t\t\t\t\t\t'wisdom',\n\t\t\t\t\t\t\t\t\t'charisma',\n\t\t\t\t\t\t\t\t].map((ability) => (\n\t\t\t\t\t\t\t\t\t<td key={ability}>\n\t\t\t\t\t\t\t\t\t\t{stats[ability]} ({prettyModifier(stats[ability])})\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\n\t\t\t\t\t<hr />\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{joinStats(\n\t\t\t\t\t\t\t'Saving throws',\n\t\t\t\t\t\t\tstats,\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t'strength_save',\n\t\t\t\t\t\t\t\t'dexterity_save',\n\t\t\t\t\t\t\t\t'constitution_save',\n\t\t\t\t\t\t\t\t'intelligence_save',\n\t\t\t\t\t\t\t\t'wisdom_save',\n\t\t\t\t\t\t\t\t'charisma_save',\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t['Str', 'Dex', 'Con', 'Int', 'Wis', 'Cha'],\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>{joinStats('Skills', stats, SKILLS, SKILLS_NAMES)}</div>\n\t\t\t\t\t{[\n\t\t\t\t\t\t'damage_vulnerabilities',\n\t\t\t\t\t\t'damage_resistances',\n\t\t\t\t\t\t'damage_immunities',\n\t\t\t\t\t\t'condition_immunities',\n\t\t\t\t\t\t'senses',\n\t\t\t\t\t\t'languages',\n\t\t\t\t\t].map((key) => (\n\t\t\t\t\t\t<div key={key}>\n\t\t\t\t\t\t\t{joinStats(\n\t\t\t\t\t\t\t\tkeyToNameFormatter(key),\n\t\t\t\t\t\t\t\tstats,\n\t\t\t\t\t\t\t\t[key],\n\t\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t\tPLAIN_VALUE_FORMATTER,\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{joinStats(\n\t\t\t\t\t\t\t'Challenge',\n\t\t\t\t\t\t\tstats,\n\t\t\t\t\t\t\t['challenge_rating'],\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t(name, value) => CR2XP(value),\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{['special_abilities', 'actions', 'legendary_actions'].map((section) => {\n\t\t\t\t\t\tif (stats[section]) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Fragment key={section}>\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<h4>{keyToNameFormatter(section)}</h4>\n\n\t\t\t\t\t\t\t\t\t\t{stats[section].map((action, i) => (\n\t\t\t\t\t\t\t\t\t\t\t<div key={action.name}>\n\t\t\t\t\t\t\t\t\t\t\t\t<em>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>{action.name}</strong>\n\t\t\t\t\t\t\t\t\t\t\t\t</em>{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t<pre>{action.desc}</pre>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nMonsterStats.propTypes = {\n\tdispatch: PropTypes.func.isRequired,\n\tmonster: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.oneOf([false])]),\n};\n\nMonsterStats.defaultProps = {\n\tmonster: false,\n};\n\nexport default connect((state, props) => {\n\tconst {\n\t\tmatch: {\n\t\t\tparams: { id },\n\t\t},\n\t} = props;\n\treturn {\n\t\t...state,\n\t\tmonster: state.initiative.actors.find((monster) => {\n\t\t\treturn monster.stats && monster.id === id;\n\t\t}),\n\t};\n})(MonsterStats);\n"]},"metadata":{},"sourceType":"module"}