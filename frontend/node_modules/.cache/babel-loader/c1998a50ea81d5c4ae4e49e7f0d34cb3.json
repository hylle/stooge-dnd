{"ast":null,"code":"import random from 'lodash/random';\nimport { calcModifier } from './statModifiers';\n\nvar dieRoll = function dieRoll() {\n  var dieNotation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var dieModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var match = /^(\\d+)?d(\\d+)([+-]\\d+)?$/.exec(dieNotation);\n\n  if (!match) {\n    throw new Error(\"Invalid dice notation: \".concat(dieNotation));\n  }\n\n  var howMany = typeof match[1] === 'undefined' ? 1 : parseInt(match[1], 10);\n  var dieSize = parseInt(match[2], 10);\n  var modifier = typeof match[3] === 'undefined' ? 0 : parseInt(match[3], 10); // console.log({\n  // \thowMany,\n  // \tdieSize,\n  // \tdieModifier,\n  // \tmodifier,\n  // });\n\n  var rollSum = 0;\n\n  for (var rollCount = 0; rollCount < howMany; rollCount++) {\n    rollSum += random(1, dieSize) + dieModifier;\n  }\n\n  return rollSum + modifier;\n};\n\nvar hitDieRoll = function hitDieRoll(dieNotation, constitution) {\n  var hitDieModifier = calcModifier(constitution);\n  return dieRoll(dieNotation, hitDieModifier);\n};\n\nexport { hitDieRoll, dieRoll };\nexport default dieRoll;","map":{"version":3,"sources":["/Users/jh/www/projects/stooge-dnd/src/utils/dieRoll.js"],"names":["random","calcModifier","dieRoll","dieNotation","dieModifier","match","exec","Error","howMany","parseInt","dieSize","modifier","rollSum","rollCount","hitDieRoll","constitution","hitDieModifier"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,SAASC,YAAT,QAA6B,iBAA7B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAuC;AAAA,MAAtCC,WAAsC,uEAAxB,EAAwB;AAAA,MAApBC,WAAoB,uEAAN,CAAM;AACtD,MAAMC,KAAK,GAAG,2BAA2BC,IAA3B,CAAgCH,WAAhC,CAAd;;AACA,MAAI,CAACE,KAAL,EAAY;AACX,UAAM,IAAIE,KAAJ,kCAAoCJ,WAApC,EAAN;AACA;;AAED,MAAMK,OAAO,GAAG,OAAOH,KAAK,CAAC,CAAD,CAAZ,KAAoB,WAApB,GAAkC,CAAlC,GAAsCI,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAA9D;AACA,MAAMK,OAAO,GAAGD,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAxB;AACA,MAAMM,QAAQ,GAAG,OAAON,KAAK,CAAC,CAAD,CAAZ,KAAoB,WAApB,GAAkC,CAAlC,GAAsCI,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAA/D,CARsD,CAUtD;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIO,OAAO,GAAG,CAAd;;AACA,OAAK,IAAIC,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAGL,OAApC,EAA6CK,SAAS,EAAtD,EAA0D;AACzDD,IAAAA,OAAO,IAAIZ,MAAM,CAAC,CAAD,EAAIU,OAAJ,CAAN,GAAqBN,WAAhC;AACA;;AAED,SAAOQ,OAAO,GAAGD,QAAjB;AACA,CAvBD;;AAyBA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACX,WAAD,EAAcY,YAAd,EAA+B;AACjD,MAAMC,cAAc,GAAGf,YAAY,CAACc,YAAD,CAAnC;AACA,SAAOb,OAAO,CAACC,WAAD,EAAca,cAAd,CAAd;AACA,CAHD;;AAKA,SAASF,UAAT,EAAqBZ,OAArB;AACA,eAAeA,OAAf","sourcesContent":["import random from 'lodash/random';\nimport { calcModifier } from './statModifiers';\n\nconst dieRoll = (dieNotation = '', dieModifier = 0) => {\n\tconst match = /^(\\d+)?d(\\d+)([+-]\\d+)?$/.exec(dieNotation);\n\tif (!match) {\n\t\tthrow new Error(`Invalid dice notation: ${dieNotation}`);\n\t}\n\n\tconst howMany = typeof match[1] === 'undefined' ? 1 : parseInt(match[1], 10);\n\tconst dieSize = parseInt(match[2], 10);\n\tconst modifier = typeof match[3] === 'undefined' ? 0 : parseInt(match[3], 10);\n\n\t// console.log({\n\t// \thowMany,\n\t// \tdieSize,\n\t// \tdieModifier,\n\t// \tmodifier,\n\t// });\n\n\tlet rollSum = 0;\n\tfor (let rollCount = 0; rollCount < howMany; rollCount++) {\n\t\trollSum += random(1, dieSize) + dieModifier;\n\t}\n\n\treturn rollSum + modifier;\n};\n\nconst hitDieRoll = (dieNotation, constitution) => {\n\tconst hitDieModifier = calcModifier(constitution);\n\treturn dieRoll(dieNotation, hitDieModifier);\n};\n\nexport { hitDieRoll, dieRoll };\nexport default dieRoll;\n"]},"metadata":{},"sourceType":"module"}