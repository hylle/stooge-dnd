{"ast":null,"code":"import _objectSpread from \"/Users/jh/www/projects/stooge-dnd/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/jh/www/projects/stooge-dnd/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchTransferMonsters),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddActor),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRemoveActor),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRollInitiative),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchInitiative);\n\nimport { take, all, fork, put } from 'redux-saga/effects';\nimport shortid from 'shortid'; // import forEach from 'lodash/forEach';\n\nimport isNaN from 'lodash/isNaN';\nimport random from 'lodash/random';\nimport filter from 'lodash/filter';\nimport { ADD_ACTOR, REMOVE_ACTOR } from '../actions';\nimport { TYPE_PLAYER, PLAYERS_ADD, PLAYERS_REMOVE } from '../reducers/players';\nimport { INITIATIVE_ADD, INITIATIVE_REMOVE, INITIATIVE_TRANSFER_ENCOUNTER, INITIATIVE_CLEAR_MONSTERS, INITIATIVE_INIT_ROLL, INITIATIVE_SET_INITIATIVE } from '../reducers/initiative';\nimport { TYPE_MONSTER } from '../reducers/monsters';\nimport { calcModifier } from '../utils/statModifiers';\nimport { hitDieRoll } from '../utils/dieRoll';\n\nfunction watchTransferMonsters() {\n  var _ref, monsters, index, monster;\n\n  return _regeneratorRuntime.wrap(function watchTransferMonsters$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!true) {\n            _context.next = 17;\n            break;\n          }\n\n          _context.next = 3;\n          return take(INITIATIVE_TRANSFER_ENCOUNTER);\n\n        case 3:\n          _ref = _context.sent;\n          monsters = _ref.monsters;\n          _context.next = 7;\n          return put({\n            type: INITIATIVE_CLEAR_MONSTERS\n          });\n\n        case 7:\n          index = 0;\n\n        case 8:\n          if (!(index < monsters.length)) {\n            _context.next = 15;\n            break;\n          }\n\n          monster = monsters[index];\n          _context.next = 12;\n          return put({\n            type: ADD_ACTOR,\n            actor: monster\n          });\n\n        case 12:\n          index++;\n          _context.next = 8;\n          break;\n\n        case 15:\n          _context.next = 0;\n          break;\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nfunction getInitiativeForActor(actor) {\n  if (actor.type === TYPE_MONSTER) {\n    return random(1, 20) + calcModifier(actor.stats.dexterity);\n  }\n\n  return 0;\n}\n\nfunction getHPforActor(actor) {\n  if (actor.type === TYPE_MONSTER) {\n    return hitDieRoll(actor.stats.hit_dice, actor.stats.constitution);\n  }\n\n  return null;\n}\n\nfunction watchAddActor() {\n  var _ref2, actor, maxHP, enhancedActor;\n\n  return _regeneratorRuntime.wrap(function watchAddActor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 17;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(ADD_ACTOR);\n\n        case 3:\n          _ref2 = _context2.sent;\n          actor = _ref2.actor;\n          maxHP = getHPforActor(actor);\n          enhancedActor = _objectSpread({\n            id: shortid.generate(),\n            initiative: getInitiativeForActor(actor),\n            affix: '',\n            currentHP: maxHP,\n            maxHP: maxHP\n          }, actor);\n\n          if (!(enhancedActor.type === TYPE_PLAYER)) {\n            _context2.next = 12;\n            break;\n          }\n\n          _context2.next = 10;\n          return put({\n            type: PLAYERS_ADD,\n            player: enhancedActor\n          });\n\n        case 10:\n          _context2.next = 12;\n          return put({\n            type: INITIATIVE_ADD,\n            actor: enhancedActor\n          });\n\n        case 12:\n          if (!(enhancedActor.type === TYPE_MONSTER)) {\n            _context2.next = 15;\n            break;\n          }\n\n          _context2.next = 15;\n          return put({\n            type: INITIATIVE_ADD,\n            actor: enhancedActor\n          });\n\n        case 15:\n          _context2.next = 0;\n          break;\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nfunction watchRemoveActor() {\n  var _ref3, _actor;\n\n  return _regeneratorRuntime.wrap(function watchRemoveActor$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!true) {\n            _context3.next = 13;\n            break;\n          }\n\n          _context3.next = 3;\n          return take(REMOVE_ACTOR);\n\n        case 3:\n          _ref3 = _context3.sent;\n          _actor = _ref3.actor;\n\n          if (!(_actor.type === TYPE_PLAYER)) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 8;\n          return put({\n            type: PLAYERS_REMOVE,\n            player: _actor\n          });\n\n        case 8:\n          _context3.next = 10;\n          return put({\n            type: INITIATIVE_REMOVE,\n            actor: _actor\n          });\n\n        case 10:\n          if (_actor.type === TYPE_MONSTER) {// yield put({ type: MONSTERS_REMOVE, monster: actor });\n            // yield put({ type: INITIATIVE_REMOVE, actor: actor });\n          }\n\n          _context3.next = 0;\n          break;\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nfunction watchRollInitiative() {\n  var _ref4, actors, actorsWithoutMonster, index, _actor2, initiative;\n\n  return _regeneratorRuntime.wrap(function watchRollInitiative$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!true) {\n            _context4.next = 18;\n            break;\n          }\n\n          _context4.next = 3;\n          return take(INITIATIVE_INIT_ROLL);\n\n        case 3:\n          _ref4 = _context4.sent;\n          actors = _ref4.actors;\n          actorsWithoutMonster = filter(actors, function (actor) {\n            return actor.type === TYPE_PLAYER;\n          });\n          index = 0;\n\n        case 7:\n          if (!(index < actorsWithoutMonster.length)) {\n            _context4.next = 16;\n            break;\n          }\n\n          _actor2 = actorsWithoutMonster[index];\n          initiative = parseInt(prompt(\"Enter initiative for \".concat(_actor2.name, \".\")), 10);\n\n          if (isNaN(initiative)) {\n            _context4.next = 13;\n            break;\n          }\n\n          _context4.next = 13;\n          return put({\n            type: INITIATIVE_SET_INITIATIVE,\n            actor: _actor2,\n            initiative: initiative\n          });\n\n        case 13:\n          index++;\n          _context4.next = 7;\n          break;\n\n        case 16:\n          _context4.next = 0;\n          break;\n\n        case 18:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\n\nexport default function watchInitiative() {\n  return _regeneratorRuntime.wrap(function watchInitiative$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddActor), fork(watchRemoveActor), fork(watchTransferMonsters), fork(watchRollInitiative)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}","map":{"version":3,"sources":["/Users/jh/www/projects/stooge-dnd/src/sagas/initiative.js"],"names":["watchTransferMonsters","watchAddActor","watchRemoveActor","watchRollInitiative","watchInitiative","take","all","fork","put","shortid","isNaN","random","filter","ADD_ACTOR","REMOVE_ACTOR","TYPE_PLAYER","PLAYERS_ADD","PLAYERS_REMOVE","INITIATIVE_ADD","INITIATIVE_REMOVE","INITIATIVE_TRANSFER_ENCOUNTER","INITIATIVE_CLEAR_MONSTERS","INITIATIVE_INIT_ROLL","INITIATIVE_SET_INITIATIVE","TYPE_MONSTER","calcModifier","hitDieRoll","monsters","type","index","length","monster","actor","getInitiativeForActor","stats","dexterity","getHPforActor","hit_dice","constitution","maxHP","enhancedActor","id","generate","initiative","affix","currentHP","player","actors","actorsWithoutMonster","parseInt","prompt","name"],"mappings":"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","sourcesContent":["import {\n\ttake, all, fork, put,\n} from 'redux-saga/effects';\nimport shortid from 'shortid';\n// import forEach from 'lodash/forEach';\nimport isNaN from 'lodash/isNaN';\nimport random from 'lodash/random';\nimport filter from 'lodash/filter';\nimport { ADD_ACTOR, REMOVE_ACTOR } from '../actions';\nimport { TYPE_PLAYER, PLAYERS_ADD, PLAYERS_REMOVE } from '../reducers/players';\nimport {\n\tINITIATIVE_ADD,\n\tINITIATIVE_REMOVE,\n\tINITIATIVE_TRANSFER_ENCOUNTER,\n\tINITIATIVE_CLEAR_MONSTERS,\n\tINITIATIVE_INIT_ROLL,\n\tINITIATIVE_SET_INITIATIVE,\n} from '../reducers/initiative';\nimport { TYPE_MONSTER } from '../reducers/monsters';\nimport { calcModifier } from '../utils/statModifiers';\nimport { hitDieRoll } from '../utils/dieRoll';\n\nfunction* watchTransferMonsters() {\n\twhile (true) {\n\t\tconst { monsters } = yield take(INITIATIVE_TRANSFER_ENCOUNTER);\n\t\tyield put({ type: INITIATIVE_CLEAR_MONSTERS });\n\n\t\tfor (let index = 0; index < monsters.length; index++) {\n\t\t\tconst monster = monsters[index];\n\t\t\tyield put({\n\t\t\t\ttype: ADD_ACTOR,\n\t\t\t\tactor: monster,\n\t\t\t});\n\t\t}\n\t}\n}\n\nfunction getInitiativeForActor(actor) {\n\tif (actor.type === TYPE_MONSTER) {\n\t\treturn random(1, 20) + calcModifier(actor.stats.dexterity);\n\t}\n\n\treturn 0;\n}\n\nfunction getHPforActor(actor) {\n\tif (actor.type === TYPE_MONSTER) {\n\t\treturn hitDieRoll(actor.stats.hit_dice, actor.stats.constitution);\n\t}\n\n\treturn null;\n}\n\nfunction* watchAddActor() {\n\twhile (true) {\n\t\tconst { actor } = yield take(ADD_ACTOR);\n\t\tconst maxHP = getHPforActor(actor);\n\t\tconst enhancedActor = {\n\t\t\tid: shortid.generate(),\n\t\t\tinitiative: getInitiativeForActor(actor),\n\t\t\taffix: '',\n\t\t\tcurrentHP: maxHP,\n\t\t\tmaxHP,\n\t\t\t...actor,\n\t\t};\n\n\t\tif (enhancedActor.type === TYPE_PLAYER) {\n\t\t\tyield put({ type: PLAYERS_ADD, player: enhancedActor });\n\t\t\tyield put({ type: INITIATIVE_ADD, actor: enhancedActor });\n\t\t}\n\n\t\tif (enhancedActor.type === TYPE_MONSTER) {\n\t\t\t// yield put({ type: MONSTERS_ADD, monster: enhancedActor });\n\t\t\tyield put({ type: INITIATIVE_ADD, actor: enhancedActor });\n\t\t}\n\t}\n}\n\nfunction* watchRemoveActor() {\n\twhile (true) {\n\t\tconst { actor } = yield take(REMOVE_ACTOR);\n\n\t\tif (actor.type === TYPE_PLAYER) {\n\t\t\tyield put({ type: PLAYERS_REMOVE, player: actor });\n\t\t\tyield put({ type: INITIATIVE_REMOVE, actor });\n\t\t}\n\n\t\tif (actor.type === TYPE_MONSTER) {\n\t\t\t// yield put({ type: MONSTERS_REMOVE, monster: actor });\n\t\t\t// yield put({ type: INITIATIVE_REMOVE, actor: actor });\n\t\t}\n\t}\n}\n\nfunction* watchRollInitiative() {\n\twhile (true) {\n\t\tconst { actors } = yield take(INITIATIVE_INIT_ROLL);\n\t\tconst actorsWithoutMonster = filter(\n\t\t\tactors,\n\t\t\t(actor) => actor.type === TYPE_PLAYER,\n\t\t);\n\n\t\tfor (let index = 0; index < actorsWithoutMonster.length; index++) {\n\t\t\tconst actor = actorsWithoutMonster[index];\n\t\t\tconst initiative = parseInt(\n\t\t\t\tprompt(`Enter initiative for ${actor.name}.`),\n\t\t\t\t10,\n\t\t\t);\n\n\t\t\tif (!isNaN(initiative)) {\n\t\t\t\tyield put({\n\t\t\t\t\ttype: INITIATIVE_SET_INITIATIVE,\n\t\t\t\t\tactor,\n\t\t\t\t\tinitiative,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default function* watchInitiative() {\n\tyield all([\n\t\tfork(watchAddActor),\n\t\tfork(watchRemoveActor),\n\t\tfork(watchTransferMonsters),\n\t\tfork(watchRollInitiative),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}